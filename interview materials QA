Ad 1 Czym jest aplikacja internetowa?





Ad 3 Czym są cookies (ciasteczka) i do czego służą?
To niewielkie informacje, nazywane ciasteczkami (z ang. cookie – ciastko), wysyłane przez serwis internetowy, który odwiedzamy i zapisywane na urządzeniu końcowym (komputerze, laptopie, smartfonie), z którego korzystamy podczas przeglądania stron internetowych.
W  „cookies”, składających się z szeregu liter i cyfr, znajdują się różne informacje niezbędne do prawidłowego funkcjonowania serwisów internetowych, np. tych wymagających autoryzacji – m.in. podczas logowania do konta pocztowego czy sklepu internetowego.
Wszystkie działające w internecie serwisy – wyszukiwarki, strony informacyjne, newsowe, sklepy internetowe, strony urzędów państwowych i innych instytucji publicznych, mogą prawidłowo działać dzięki wykorzystaniu „cookies”.
Ciasteczka umożliwiają także m.in. zapamiętanie naszych preferencji i personalizowanie stron internetowych w zakresie wyświetlanych treści oraz dopasowania reklam. Dzięki „cookies” możliwe jest też rejestrowanie produktów i usług czy głosowanie w internetowych ankietach.
Dane osobowe gromadzone przy użyciu „cookies” mogą być zbierane wyłącznie w celu wykonywania określonych funkcji na rzecz użytkownika, czyli np. zapamiętania logowania do serwisu czy zapamiętania towarów dodanych do koszyka w sklepie internetowym. Takie dane są zaszyfrowane w sposób uniemożliwiający dostęp do nich osobom nieuprawnionym.
 
Co nam dają cookies?
Dzięki „cookie” korzystanie ze stron internetowych jest łatwiejsze i przyjemniejsze a ich zawartość – teksty, zdjęcia, ankiety, sondy, ale również reklamy – jest lepiej dopasowana do oczekiwań i preferencji każdego użytkownika internetu.
„Cookies”:
•	umożliwiają zapamiętywanie naszych odwiedzin na stronie i naszych preferencji dotyczących tej strony (m.in. język strony, jej kolor, układ, rozmieszczenie treści);
•	pozwalają sklepom internetowym polecać nam produkty związane z tymi, które zazwyczaj wybieramy, które mogą nas potencjalnie zainteresować;
•	pomagają przechowywać towary wrzucone przez nas do zakupowego koszyka w sklepach online;
•	umożliwiają korzystanie z kont w serwisach;
•	pozwalają być zalogowanym do serwisu na każdej z dostępnych w danej witrynie podstron;
•	sprawiają, że nie widzimy wciąż i wciąż tej samej reklamy czy ankiety do wypełnienia;
•	pozwalają na prezentację nam reklam w sposób uwzględniający nasze zainteresowania czy miejsce zamieszkania – w ten sposób reklamy, dzięki którym korzystanie z wielu serwisów internetowych może być bezpłatne, mogą informować nas o potencjalnie interesujących nas produktach i usługach;
•	pozwalają tworzyć anonimowe statystyki odwiedzalności serwisów.
Dzięki „cookies” właściciele i wydawcy serwisów internetowych są w stanie ocenić realne zainteresowanie swoimi serwisami, mogą lepiej poznać oczekiwania i preferencje użytkowników, zrozumieć sposób w jaki użytkownicy korzystają z ich serwisów oraz, korzystając z najnowszych rozwiązań technologicznych, mogą stale udoskonalać swoje serwisy internetowe czyniąc je jeszcze przyjaźniejszymi i lepiej dostosowanymi do naszych potrzeb.
 
Co powinniśmy wiedzieć o „cookies”?
Nie służą identyfikacji użytkowników i na ich podstawie w żaden sposób nie jest ustalana czyjakolwiek tożsamość;
•	„cookies” identyfikują dane komputera i przeglądarki używanych do przeglądania stron internetowych – pozwalają np. dowiedzieć się czy dany komputer już odwiedzał stronę;
•	dane pozyskane z „cookies” nie są w żaden sposób łączone z danymi osobowymi użytkowników pozyskanymi np. podczas rejestracji w serwisach;
•	nie są szkodliwe ani dla nas ani dla naszych komputerów, czy smartfonów – nie wpływają na sposób ich działania;
•	nie powodują zmian konfiguracyjnych w urządzeniach końcowych, ani w oprogramowaniu zainstalowanym na tych urządzeniach;
•	domyślne parametry „ciasteczek” pozwalają na odczytanie informacji w nich zawartych jedynie serwerowi, który je utworzył;
•	na podstawie naszych zachowań na odwiedzanych stronach internetowych przekazują do serwerów informacje, dzięki którym wyświetlana strona jest lepiej dopasowana do indywidualnych preferencji.
 
Podstawowe rodzaje ciasteczek
„Cookies” sesyjne – są to tymczasowe informacje przechowywane w pamięci przeglądarki do momentu zakończenia sesji przeglądarki, czyli do momentu jej zamknięcia. Te cookies są obowiązkowe, aby niektóre aplikacje lub funkcjonalności działały poprawnie.
„Cookies” stałe – dzięki nim korzystanie z często odwiedzanych stron jest łatwiejsze (np. zapewniają optymalną nawigację, zapamiętują wybraną rozdzielczość, układ treści etc.). Te informacje pozostają pamięci przeglądarki przez dłuższy okres. Czas ten zależy od wyboru, którego można dokonać w ustawieniach przeglądarki. Ten rodzaj cookies zezwala na przekazywanie informacji na serwer za każdym razem, gdy odwiedzana jest dana strona. Stałe cookies są również nazywane jako tzw. śledzące „cookie” (ang. tracking cookies).
„Cookies” podmiotów zewnętrznych – (ang. third parties cookies) – to informacje pochodzące np. z serwerów reklamowych, serwerów firm i dostawców usług (np. wyszukiwania albo map umieszczanych na stronie) współpracujących z właścicielem danej strony internetowej. Ten rodzaj cookie pozwala dostosowywać reklamy – dzięki którym korzystanie ze stron internetowych może być bezpłatne – do preferencji i zwyczajów ich użytkowników. Pozwalają również ocenić skuteczność działań reklamowych (np. dzięki zliczaniu, ile osób kliknęło w daną reklamę i przeszło na stronę internetową reklamodawcy). Na podstawie informacji pozyskanych z tych cookies można tworzyć tzw. ogólne profile użytkowników, dzięki którym mężczyźni interesujący się finansami i samochodami (odwiedzający strony o tej tematyce) zobaczą reklamy dopasowane do ich potencjalnych zainteresowań, a nie np. reklamę kobiecych kosmetyków.
 
Zarządzanie cookies
Pamiętaj, że masz możliwość samodzielnego zarządzania „cookies”. Umożliwiają to np. przeglądarki internetowe, z których korzystasz. W najpopularniejszych przeglądarkach masz możliwość:
•	zaakceptowania obsługi „cookies”, co pozwoli Ci na pełne korzystanie z opcji oferowanych przez witryny internetowe;
•	zarządzania cookies na poziomie pojedynczych, wybranych przez Ciebie witryn;
•	określenia ustawień dla różnych typów „cookie”, na przykład akceptowania plików trwałych jako sesyjnych itp.;
•	blokowania lub usuwania cookies.
Efektem zmiany ustawień w przeglądarce, w zależności od wybranej opcji, może być utrata możliwości korzystania z niektórych serwisów i usług lub z niektórych funkcji w nich dostępnych.

Ad 5
Co to jest protokół http?  Http (Hypertext Transfer Protocol) jest używany do przesyłania danych do przeglądarki internetowej z serwera. Umożliwia komunikację pomiędzy systemami i surfowanie po sieci. Dawniej był stosowany na niemal wszystkich stronach www, obecnie się od niego odchodzi, głównie ze względu na to, że informacje przesyłane za pomocą tego protokołu nie są szyfrowane. Protokół http nie pamięta poprzedniej sesji, skupia się na dostarczeniu informacji, nie na sposobie dostarczenia i tym, by był on bezpieczny.

Co to jest protokół https?
Protokół https (Hypertext Transfer Protocol Secure) jest w zasadzie rozszerzonym o zabezpieczenia protokołem http. Używa certyfikatu SSL do przenoszenia danych w celu zabezpieczenia np. transakcji internetowych. Uniemożliwia nieautoryzowanym użytkownikom na dostęp do danych. Informacje przesyłane przez https są szyfrowane.
Jaka jest różnica między http a https?
Główną różnicą między http a https jest certyfikat SSL. Https to protokół http z dodatkowymi zabezpieczeniami. Te zabezpieczenia są niezwykle ważne w przypadku witryn z poufnymi danymi użytkowników. Certyfikat SSL szyfruje informacje, przekładając je na kod, który, nawet jeśli zostanie przechwycony, nie może być odczytany przez osoby nieuprawnione. Dodatkową warstwę zabezpieczeń zapewnia certyfikat TLS, który powoduje integralność danych oraz uwierzytelnianie. TLS również jest obsługiwany przez protokół https. Dzięki tym certyfikatom połączenia są zabezpieczone.
Jaki wpływ na SEO mają http i https?
Posiadanie bezpiecznej witryny ma zaskakująco pozytywny wpływ na SEO. Oprócz tego, że już w 2014 roku Google, w celu zachęcenia właścicieli stron www do korzystania z bezpieczniejszej opcji, ogłosiło, że będzie faworyzowało strony z protokołem https, taka zmiana ma jeszcze inny, pozytywny wpływ na pozycjonowanie. Na poprawienie pozycji witryny może wpłynąć fakt, że użytkownicy wiedzą, że jest ona bezpieczna, przez co chętniej z niej korzystają niż z konkurencyjnych stron bez certyfikatu SSL.
Według badania GlobalSign 84% konsumentów zrezygnowałoby z zakupu, gdyby dane zostały przesłane przez niezabezpieczone połączenie, a 82% osób w ogóle nie przegląda niezabezpieczonej witryny. Użytkownicy bardziej ufają bezpiecznym stronom, co wpływa pozytywnie na konwersje oraz ruch na stronie. Ponadto dzięki zachowywaniu danych witryny odsyłającej zwiększa się skuteczność Google Analytics.
Jednak należy również zwrócić uwagę, że aby przejście na https nie było ryzykowne dla SEO, trzeba pamiętać o kilku wskazówkach podczas przełączania się z protokołu http. Przede wszystkim:
•	poinformuj Google o przejściu z http na https, żeby szybciej osiągnąć obiecane przez Google wyższe rankingi,
•	zdecyduj, jaki certyfikat potrzebujesz i dla ilu domen,
•	używaj względnych adresów URL,
•	pamiętaj, aby nie blokować witryny HTTPS za pomocą plików robots.txt,
•	upewnij się, że zezwalasz wyszukiwarkom na indeksowanie,
•	najlepiej wykorzystaj narzędzia Google dla webmasterów bądź indomonitorowania przejścia z http na https, by szybko reagować na ewentualne problemy.
Dlaczego warto przejść na protokół https?
Szyfrowanie jest niezwykle ważne w czasach tak wielu ataków hakerskich oraz przeniesienia niemal wszystkich wrażliwych danych do internetu. Za pomocą stron internetowych konsumenci monitorują swoje dochody, zarządzają życiowymi oszczędnościami, wykonują kosztowne operacje, przesyłają prywatne zdjęcia, maile, czy komunikują się zarówno z bliskimi, jak i partnerami biznesowymi. Ingerencja osób trzecich w przypadku wielu z tych operacji jest niebywałym zagrożeniem.
Protokół https pozwala na szyfrowanie całej komunikacji, łącznie z adresami URL, historią przeglądania oraz numerami kart kredytowych. I większość klientów ma tego świadomość, a jeśli nie, to pomaga im w tym Google. Chrome ostrzega użytkowników przed nieszyfrowanymi stronami, wyświetlając im niepokojący komunikat o niebezpieczeństwie danej strony. Co skutecznie odstrasza konsumentów. Bezpieczeństwo jest dużą zaletą i prowadzi do kolejnych korzyści dla strony. Witryny https osiągają lepsze wyniki w Google. Ruch na www i konwersja są lepsze właśnie dzięki zaufaniu klientów.
Http czy https – podsumowanie
Https to obecnie standardowy protokół. Jest coraz mniej stron korzystających z http. Bezpieczeństwo klientów jest kluczową sprawą. Bezpieczeństwo nie tylko danych takich jak numery kart, piny czy dane osobowe, ale i możliwość swobodnego surfowania po stronie, które daje certyfikat SSL. Przejście na protokół https jest jednym z czynników pozytywnie wpływających na SEO.


Co to są testy mutacyjne?
Testy mutacyjne pozwalają na testowanie naszych testów. Dokonują tego poprzez modyfikowanie (mutowanie) naszego kodu produkcyjnego. Tak zmieniony kod – czyli nasz kod produkcyjny z jedną wprowadzoną przez testy mutacyjne zmianą – nazywa się mutantem. Jest on następnie kompilowany i uruchamiane są wobec niego testy – te, które już mamy. Jeśli żaden z testów się nie wysypie, oznacza to, że nasze testy nie wyłapują zmian w kodzie produkcyjnym. Jest to zła sytuacja, w której mówimy, że mutant przeżył (survived). Jeśli natomiast co najmniej jeden test się wywali, mówimy, że mutant został zabity (killed). Jest to pożądane zachowanie, ponieważ oznacza, że zmiany w kodzie produkcyjnym są wyłapywane przez nasz zestaw testów.
Co nam dają testy mutacyjne?
•	większą pewność siebie przy refactoringu. Zmieniając kod produkcyjny pokryty testami mutacyjnymi, czuję się dużo bezpieczniej
•	„darmowe” generowanie przypadków testowych. Na pewno często pisząc testy, spędzasz czas na wymyślaniu, co może pójść nie tak. Testy mutacyjne pozwalają wygenerować takie przypadki automatycznie i bez wysiłku. W efekcie dopisujesz do swojego kodu nowe testy pokrywające znalezione przez mutanty przypadki
•	wyłapywanie większej liczby błędów w kodzie produkcyjnym. Czasami wygenerowany mutant pokazuje, że jakiś warunek czy scenariusz w naszym kodzie jest bezsensowny. Skutkiem tego może być uproszczenie kodu produkcyjnego lub dopracowanie warunków brzegowych.
Testy mutacyjne
Czym są ? To technika polegająca na wprowadzaniu małych i losowych zmian w kodzie naszej aplikacji. Zmiany te powinny zostać wykryte przez nasze testy jednostkowe. Jeżeli, któraś ze zmian nie została wykryta oznacza to, że nasze testy mogą nie być tak dobre jak nam się wydawało.
Jakie zmiany?
Poniżej lista z przykładowymi zmianami, które mogą zostać wprowadzone w naszym kodzie.
•	Zmiana granicy w warunkach, np. > zostanie zmienione na >=, >= na >, itd.,
•	Negacja warunków, np. == zostanie zmienione na !=, <= na >, itd.,
•	Usunięcie warunków i zastąpienie ich stałą wartością, np. a > b zostanie zmienione na true,
•	Zmiana operacji matematycznych, np. dodawanie zostanie zamienione na odejmowanie, a mnożenie na dzielenie,
•	Zmiana wartości zmiennych na wartości defaultowe lub stałe, np. int zostanie ustawiony na lub inną losową wartość,
•	Zwrócenie null zamiast obiektu,
•	Pominięcie wywołania metody typu void,
Właśnie zapoznaliśmy się z przykładowymi modyfikacjami, które mogą zostać wprowadzone do aplikacji podczas testów mutacyjnych. Testy jednostkowe powinny być napisane w taki sposób, aby zmiany te spowodowały to, że nasze testy nie przejdą. Testy te mogą nam pomóc w sprawdzeniu jak dobre są nasze testy jednostkowe. 
Testowanie mutacyjne (in. mutation testing / mutation analysis / program mutation) – technika wykorzystywana do projektowania testów oprogramowania oraz oceny jakości testów już istniejących (np. testów jednostkowych). Testowanie mutacyjne polega na wielokrotnym wprowadzaniu niewielkich zmian do programu. Po wprowadzeniu zmian program uruchamiany jest ponownie, a zadaniem testu jest wykrycie wprowadzonych modyfikacji oraz usunięcie ich. Głównym celem stosowania testowania mutacyjnego jest pomoc testerowi w budowaniu skutecznych testów lub zlokalizowanie słabych punktów testów już wykorzystywanych. Testy mutacyjne zalicza się do grupy testów strukturalnych (ang. white-box testing).
Bardziej ogólna definicja testowania mutacyjnego mówi, że testowanie to polega na stosowaniu dobrze zdefiniowanych reguł w strukturach składniowych programu w celu dokonywania systematycznych zmian w artefaktach oprogramowania.
Główne cele stosowania testowania mutacyjnego
•	identyfikowanie słabo przetestowanych fragmentów kodu (tych, dla których modyfikacje nie zostały odnalezione) 
•	identyfikowanie słabych testów (tych, które mają małą wykrywalność mutacji) 


Składniki przypadku testowego:
* Nazwa /opis, tytuł/ - opis tego co dany test będzie sprawdzał. Staramy się aby był krótki i zwięzły. Czasem w projekcie stosuje się umowne konwencje nazewnictwa przypadków testowych, aby uniknąć duplikatów i w możliwie szybki sposób odnaleźć konkretny przpadek testowy. Np. Logowanie do alikacji prawidłowymi danymi - Dowolny użytkownik.
* Cel testu - w tym miejscu mozna wpisać (czasem wręcz dosłonie przepisać) fragment wymagania, które będzie przetestowane, np. "Test sprawdza czy dowolny użytkownik może zalogowac się do systemu".
* Warunki wstępne - warunki, które powinny zostać spełnione, zanim przejdziemy do wykonywania testu. To jest BARDZO WAŻNE, ponieważ jeśli dobrze opiszemy warunki wstępne, jest większe prawdopodobieństwo, że test zostanie prawidłowo przeprowadzony.
* Wymagania - numer wymagania, które zostanie przetestowane. W przypadku historyjek uzytkownika, podajemy nr historyjki. Wymagania będą pokrywane przypadkiem. 
* Typ testu/Rodzaj - pozytywny/negatywny. W TestLinku występuje pole "Rodzaj testu", które wymaga określenia, czy stworzony test jest testem manulanym czy automatycznym.
* Priorytet - niski/wysoki.
* Numer kroku - W narzędziach używanych do tworzenia testów, numery są nadawane kolejno przez system, można je też przenumerować.
* Opis kroku - szczegółowa komenda do wykonania w systemie.
* Oczekiwany rezultat - Efekt wykonania kroku z opisu.
* Aktualny rezultat - kolumna dodawana w przypadku przeprowadzania testów formalnie. Różnie nazywana w różnych narzędzaich. 

Jak będzie wyglądało poprawne zgłoszenie defektu?                                                                                                                  Liczne narzędzia ułatwiają ten proces poprzez domyślne definiowanie pól, jednak dobrze jest nauczyć się i zapamiętać najważniejsze informacje, które powinny znaleźć się w każdym zgłoszeniu defektu. A są to:                                            
•	Identyfikator zgłoszenia
•	Krótki i rzeczowy tytuł zgłaszanego defektu
•	Data i godzina wystąpienia defektu
•	Zgłaszający zespół
•	Autor zgłoszenia
•	Przypisany do
•	Identyfikacja elementu testowego i środowiska
•	Faza cyklu życia oprogramowania, w której zaobserwowano defekt. Z reguły (Dev, Test/QA, Prod)
•	Opis z krokami do reprodukcji defektu oraz warunkami wstępnymi (danymi testowymi)
•	Oczekiwane i rzeczywiste rezultaty
•	Ważność
•	Priorytet
•	Status w narzędziu do zarządzania testowaniem, np. otwarty, odroczony, powielony, oczekujący na poprawkę, oczekujący na testowanie potwierdzające, ponownie otwarty, zamknięty
•	Załączniki.


Czym są testy regresyjne i czym różnią się od retestów?
Retesty polegają na uruchomieniu przypadków testowych, które podczas ostatniego uruchomienia wykryły błędy, w celu sprawdzenia, czy poprawka rozwiązuje problemy.
Testy regresji to ponowne przetestowanie programu po dokonaniu w nim modyfikacji, w celu sprawdzenia, czy w wyniku zmian nie powstały nowe defekty lub nie ujawniły się istniejące wcześniej.


Omów cykl życia defektu
Cykl życia defektu składa się z etapów, w trakcie których zmieniany jest status zgłoszenia. Najprostsza ścieżka to: 
Zgłoszenie defektu przez testera 
Przypisanie do niego programisty przez lidera zespołu/managera
Naprawienie defektu przez programistę
Weryfikacja i zamknięcie defektu przez testera
Niestety nie zawsze tak to wygląda i czasem defekt wymaga dodatkowych poprawek i wielokrotnie wraca do programisty. Bywają też sytuacje, gdy zgłoszony defekt nie był należycie opisany i programista potrafił go zreprodukować.
Defekty są zwykle zgłaszane w dedykowanym narzędziu (tzw. bugtracker) i najczęściej nadaje się im poniższe statusy:
Dodanie znalezionego defektu – defekt otrzymuje status NOWY
Przypisane go do programisty zmienia status na PRZYPISANY lub OTWARTY
Gdy defekt jest naprawiany, jego status powinien być ustawiony na W TOKU
Gdy poprawka wymaga przeglądu kodu (code review), programista zmienia status na W REVIEW
Po naprawie lub code review, defekt oczekuje na weryfikację – DO WERYFIKACJI
Po weryfikacji i potwierdzeniu, że defekt został naprawiony, zmieniamy status na ZAMKNIĘTY.

Czym jest piramida testów?
Piramida testów to przedstawienie w sposób graficzny hierarchii ilości wykonywanych testów. Pomaga ona określić priorytety w projekcie.
Na samym dole znajdują się testy jednostkowe (unit testy). Stanowią one największą część testów w projekcie. Są one najtańsze i najszybsze ponieważ nie testują całej aplikacji/systemu ani nawet jej komponentów, lecz weryfikują, czy jednostka kodu (np. metoda, klasa, serwis) działa zgodnie z oczekiwaniami. Nie wymagają więc przygotowania środowisk testowych. 
Po środku znajdują się testy integracyjne. Nie są one uruchamiane w kompletnej izolacji jak w przypadku testów jednostkowych, tym razem interesuje nas integracja z innymi komponentami. Komponentami mogą być: zewnętrzny serwis, baza danych, itd.
Testy funkcjonalne (end-to-end) powinny stanowić najmniejszą ilość testów w projekcie. Testują one całą funkcjonalność od początku do końca. Symulują zachowanie użytkowników końcowych. Najczęściej testują też warstwę graficzną (jeśli występuje). Często realizowane są przy użyciu biblioteki Selenium lub innych pokrewnych.


Różnica między testami czarnoskrzynkowymi i białoskrzynkowymi
Testy czarnoskrzynkowe (black box) bazują na specyfikacji, bez wnikania w kod programu. Dotyczą one “widocznego” zachowania aplikacji, a nie implementacji, do której wglądu nie ma użytkownik końcowy.
Testy białoskrzynkowe (white box) wymagają analizy struktury aplikacji lub systemu. Dzięki takiemu rodzajowi testów określić stopień, w jakim dany element został przetestowany. Testy te mają na celu jak najlepsze pokrycie różnych ścieżek programu. 


Testy funkcjonalne a niefunkcjonalne
Funkcjonalności to nic innego jak czynności wykonywane przez aplikacje. Testy funkcjonalne analizują zewnętrzne zachowanie oprogramowania, traktując je jako czarną skrzynkę.
Testy niefunkcjonalne skupiają się na charakterystyce działania aplikacji i obejmują: testy wydajności, użyteczności, niezawodności, bezpieczeństwa oraz testy możliwości pracy na różnych platformach. 


Czym są i kto tworzy testy jednostkowe?
Testy jednostkowe (unit tests) to zbiór testów, które weryfikują, czy jednostka kodu (np. metoda, klasa, serwis) działa zgodnie z oczekiwaniami. Są one zwykle tworzone przez programistów w ramach wytwarzania oprogramowania. Testy te uruchamiane są w izolacji, co oznacza, że nie jesteśmy w żaden sposób związani z innymi elementami systemu. Testy jednostkowe są nieodłącznym elementem wytwarzania oprogramowania w podejściu TDD (Test Driven Development).


Czym jest BDD i TDD.
TDD (Test-Driven Development) jest podejściem do tworzenia oprogramowania, w którym główną ideą jest w pierwszej kolejności pisanie testów do nieistniejącej funkcjonalności, a dopiero potem napisanie kodu implementującego tę funkcjonalność.
BDD (Behavior-Driven Development) to podejście będące rozwinięciem TDD. Testy pisane z wykorzystaniem składni języka naturalnego (np. zdań w języku angielskim), które wyrażają zachowanie i oczekiwane rezultaty. Kryteria akceptacyjne są pisane w formie scenariuszy i korzystają ze słów kluczowych Given (początkowy warunek), When (opis występującego zdarzenia) oraz Then (oczekiwany rezultat). Dużą zaletą podejścia BDD jest to, że testy zrozumiałe są dla pracowników nietechnicznych. Mogą one również stanowić swego rodzaju dokumentację systemu.
